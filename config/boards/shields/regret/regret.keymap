#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM  1
#define NAV  2
#define DE   3

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};
/{
behaviors {
        
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <250>;
            //quick-tap-ms = <100>;
            //hold-while-undecided;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <250>;
            //hold-while-undecided;
            //quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
        lt_wr: layer_toggle_write {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Toggle writing";
        };
    };

    combos {
        compatible = "zmk,combos";
        /* Top corners (Q+P) = bootloader */
        combo_boot {
            key-positions = <0 9>;
            bindings = <&bootloader>;
        };
        /* Bottom corners (Z+/) = RGB toggle */
        combo_rgb_tog {
            key-positions = <20 29>;
            bindings = <&rgb_ug RGB_TOG>;
        };
        COMBO(boot, &bootloader, 0 9, BASE)
        COMBO(shiftablesch, &macro_shiftable_sch, 17 18, 0)
        COMBO(sfS,  &kp MINUS,  16 17, BASE DE) // Scharf S ÃŸ
        COMBO(LT,   &kp NUBS,       21  22, 0 ) // lower than
        //COMBO(PIP,  &kp RA(NUBS),  21  22, 1)  // PIPE
        COMBO(GT,   &kp LS(NUBS),   27  28, 0 ) // greater than
        COMBO(TLD,  &kp RA(NUBS),   27  28, NUM) // Tilde
        COMBO(DOT,  &kp DOT,        11  13, 0 1)  
        COMBO(CMA,  &kp COMMA,        12  13, 0 1)
        COMBO(ESC,  &kp ESC,        10  1,  0 1 2 3)
        COMBO(SQT,  &kp LS(NUHS),   26  27, NUM  ) // Single quotes
        COMBO(DQT,  &kp LS(N2),     26  27, BASE )// Double quotes
        COMBO(ENT,  &kp ENTER,      7   8,  0 1 2 3)
        COMBO(ENT2, &kp ENTER,      1   2,  0 1 )
        COMBO(br1,  &macro_brc1,     22 23,  NUM)
        COMBO(br2,  &macro_brc2,     21 22,  NUM)
        COMBO(br3,  &macro_brc3,     20 21,  NUM
    };
macros {       
        snip: snip {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LSHFT &kp LEFT_GUI
                        &macro_tap &kp S
                        &macro_release &kp LSHIFT &kp LEFT_GUI>;
            label = "SNIP";
        };
        macro_shiftable_sch: macro_shiftable_sch {
            label = "Macro_shiftable_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp LSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };
        macro_brc1: macro_brc1 {
            label = "macro_brc1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp LS(N8)
                    &macro_tap &kp LS(N9)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };
        macro_brc2: macro_brc2 {
            label = "macro_brc2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp RA(N8)
                    &macro_tap &kp RA(N9)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };
        macro_brc3: macro_brc3 {
            label = "macro_brc3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp RA(N7)
                    &macro_tap &kp RA(N0)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };
                
    };
    keymap {
        compatible = "zmk,keymap";

        Base  {
// ------------------------------------------------------------------------------------------------------
// |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |
// |   10    |   11    |   12    |   13    |   14    |   15    |   16    |   17    |   18    |   19    |
// |   20    |   21    |   22    |   23    |   24    |   25    |   26    |   27    |   28    |   29    |
//                               |   30    |   31    |   32    |   33    |
            bindings = <
     &kp Q       &kp V        &kp K          &kp C           &kp C_MUTE  &kp LG(LA(K))    &kp H       &kp G       &kp F       &kp P
     &kp U       &hl LALT I   &hl LSHFT A    &hl LCTRL E     &hl RALT O  &hr RALT D  &hr LCTRL N &hr LSHFT R &hr LALT T  &kp S
     &hl LGUI X  &kp Z        &kp Y          &kp L           &kp DOT     &kp COMMA   &kp M       &kp B       &kp W       &hr LGUI J
                                        &lt 1 SPACE     &lt 2 TAB   &kp LSHIFT    &lt_wr 3 BSPC
            >;
        };
       Num {
           bindings = <
     &kp BSPC   &kp N4        &kp N5           &kp N6           &kp COMMA      &kp LS(N5)         &kp LS(N4)     &kp BSLH        &kp GRAVE         &kp PIPE
     &kp N0     &hl LALT N1   &hl LSHFT N2     &hl LCTRL N3     &hl RALT DOT   &hr RALT LS(N0)    &hr LCTRL RBKT &hr LSHFT SLASH &hr LALT LS(RBKT) &kp LS(N7)
     &kp DEL    &kp N7        &kp N8           &kp N9           &trans         &trans             &kp LS(N6)     &kp LS(GRAVE)   &kp RA(RBKT)      &kp RA(MINUS) 
                                               &trans           &trans     &trans          &trans   
        >;
      }; 
        Nav {
            bindings = <
    &kp LC(Z)   &kp HOME     &kp UP        &kp END        &snip        &trans       &kp F9        &kp F10       &kp F11     &kp F12
    &kp LC(Y)   &kp LEFT     &kp DOWN      &kp RIGHT      &kp LC(S)    &trans       &hr LCTRL F5  &hr LSHFT F6  &hr LALT F7 &kp F8
    &kp DEL     &kp LC(X)    &kp LC(C)     &kp LC(V)      &trans       &trans       &kp F1        &kp F2        &kp F3      &kp F4
                                           &trans         &trans       &trans       &trans 
            >;
        };
    //     Nav {
    //         bindings = <
    // &kp TAB     &kp HOME     &kp UP        &kp END        &snip        &kp LS(N5)   &kp LS(N2)         &kp BSLH            &kp GRAVE    &kp NUHS
    // &kp DEL     &kp LEFT     &hl LSHFT DOWN &kp RIGHT     &kp LC(S)    &kp LS(N0)   &hr LCTRL RBRC  &hr LSHIFT SLASH &hr LALT LS(RBRC)      &kp LS(N7)
    // &kp LC(Y)   &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp NUBS     &kp LS(GRAVE) &kp LS(N6)         &kp RA(BSLH)       &kp RA(RBRC)  &kp RA(MINUS)
    //                                        &trans         &trans       &trans       &trans 
    //         >;
    //     };       jj

        DE {
            bindings = <
&kp RA(Q)           &trans          &trans          &kp C_VOL_DN    &kp C_MUTE      &trans            &kp C_VOL_UP    &trans                &trans         &kp ENTER
&kp LBKT            &trans          &kp SQT         &kp RA(E)       &kp SEMI        &trans            &kp LS(N1)      &hr LSHIFT LS(MINUS)  &trans         &trans
&rgb_ug RGB_SPD     &rgb_ug RGB_SPI &rgb_ug RGB_BRD &rgb_ug RGB_BRI &rgb_ug RGB_HUD &rgb_ug RGB_HUI   &rgb_ug RGB_EFR &bt BT_SEL 0          &bt BT_SEL 1   &rgb_ug RGB_EFF
                                                    &trans          &trans    &bt BT_CLR    &trans  
            >;
        };
    };
};
