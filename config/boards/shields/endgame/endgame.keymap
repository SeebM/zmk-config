/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_de.h"

#define BASE 0
#define NUM  1
#define NAV  2
#define DE   3

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};


/ {
    chosen {
          zmk,battery = &vbatt;
    };

    vbatt: vbatt {
            compatible = "zmk,battery-nrf-vddh";
            label = "VBATT";
    };

    combos {
       compatible = "zmk,combos";
        /* Top corners (Q+P) = bootloader */
        combo_boot {
            key-positions = <0 9>;
            bindings = <&bootloader>;
        };
       
        COMBO(shiftablesch, &macro_shiftable_sch, 17 18, 0)
        COMBO(LT,   &kp NUBS,       21  22, 0 ) // lower than
        COMBO(PIP,   &kp RA(NUBS),  21  22, 1)  // PIPE
        COMBO(GT,   &kp LS(NUBS),   27  28, 0 ) // greater than
        COMBO(TLD,  &kp RA(RBKT),   27  28, 1) // Tilde
        COMBO(DOT,  &kp DOT,        12  13, 0 1)  
        COMBO(CMA,&kp COMMA,        16  17, 0 1)
        COMBO(ESC,  &kp ESC,        10  1,  0 1 2 3)
        COMBO(SQT,  &kp LS(NUHS),   22  23, 0 ) // Single quotes
        COMBO(DQT,  &kp LS(N2),     26  27, 0 )// Double quotes
        COMBO(EQL,  &kp LS(N0),     26  27, 1)
        COMBO(ENTR, &kp ENTER,      7   8,  0 1 2 3)
        COMBO(TAB, &kp TAB,         1   2,  0 1 2 3)
        COMBO(COL, &kp LS(DOT),     11 12,  1)
        COMBO(SCL, &kp LS(COMMA),   17 18,  1)

    };
    macros {       
        snip: snip {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LSHFT &kp LEFT_GUI
                        &macro_tap &kp S
                        &macro_release &kp LSHIFT &kp LEFT_GUI>;
            label = "SNIP";
        };
        macro_shiftable_sch: macro_shiftable_sch {
            label = "Macro_shiftable_sch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp S
                    &macro_release &kp LSHIFT
                    &macro_tap &kp C &kp H
            >;
            tap-ms = <10>;
        };
        macro_brc1: macro_brc1 {
            label = "macro_brc1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp LS(N8)
                    &macro_tap &kp LS(N9)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };
        macro_brc2: macro_brc2 {
            label = "macro_brc2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp RA(N8)
                    &macro_tap &kp RA(N9)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };
        macro_brc3: macro_brc3 {
            label = "macro_brc3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <
                    &macro_tap &kp RA(N7)
                    &macro_tap &kp RA(N0)
                    &macro_tap &kp LEFT
            >;
            tap-ms = <10>;
        };

        
    };

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <250>;
            //quick-tap-ms = <100>;
            //hold-while-undecided;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            //flavor = "hold-preferred";
            // flavor = "tap-preferred";
            flavor = "balanced";
            tapping-term-ms = <250>;
            //hold-while-undecided;
            //quick-tap-ms = <100>;
            // global-quick-tap;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        // ------------------------------------------------------------------------------------------------------
// |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |
// |   10    |   11    |   12    |   13    |   14    |   15    |   16    |   17    |   18    |   19    |
// |   20    |   21    |   22    |   23    |   24    |   25    |   26    |   27    |   28    |   29    |
// |   30    |                   |   31    |   32    |   33    |   34    |                   |   35    |

        BASE_layer {
            label= "BASE";
            bindings = <
                &kp Q       &kp V        &kp K          &kp C           &kp C_MUTE  &kp LG(LA(K))    &kp H       &kp G       &kp F       &kp P
                &kp U       &hl LALT I   &hl LSHFT A    &hl LCTRL E     &kp O       &kp D       &hr LCTRL N &hr LSHFT R &hr LALT T  &kp S
                &hl LGUI X  &kp Z        &kp Y          &kp L           &kp DOT     &kp COMMA   &kp M       &kp B       &kp W       &hr LGUI J
                &none                                   &lt 1 SPACE     &lt 2 TAB   &kp ENTER    &lt 3 BSPC                          &none
                        >;
        };


        NUM_layer {
            label= "NUM";
            bindings = <
                &kp F1      &kp F2        &kp F3           &kp F4           &kp F5     &kp F6         &kp F7       &kp F8       &kp F9         &kp F10
                &kp N1      &hl LALT N2   &hl LSHFT N3     &hl LCTRL N4     &kp N5     &kp N6         &hr LCTRL N7 &hr LSHFT N8 &hr LALT N9    &kp N0
                &kp DEL     &macro_brc3   &macro_brc2      &macro_brc1      &kp FSLH   &kp LS(FSLH)   &kp RBKT     &kp SLASH    &kp LS(RBKT)   &kp LS(N7) 
                                        &trans        &trans        &trans       &trans       &trans &trans
            >;
        };

        

        NAV_layer {
            label= "NAV";
            bindings = <
                &kp TAB     &kp HOME     &kp UP        &kp END        &snip        &kp LS(N5)   &kp LS(N2)      &kp BSLH         &kp GRAVE         &kp NUHS
                &kp DEL     &kp LEFT     &hl LSHFT DOWN &kp RIGHT     &kp LC(S)    &kp LS(N0)   &hr LCTRL RBKT  &hr LSHIFT SLASH &hr LALT LS(RBKT) &kp LS(N7)
                &kp LC(Y)   &kp LC(X)    &kp LC(C)     &kp LC(V)      &kp NUBS     &kp LS(GRAVE) &kp LS(N6)     &kp LS(GRAVE)    &kp RA(RBKT)      &kp RA(MINUS)
                                     &trans     &trans   &trans         &trans          &trans      &trans
            >;
        };
        DE_layer {
            label= "DE";
            bindings = <
                &kp RA(Q) &trans       &trans       &kp C_VOL_DN &kp C_MUTE &trans   &kp C_VOL_UP   &trans               &trans       &kp ENTER
                &kp LBKT  &trans       &kp SQT      &kp RA(E)    &kp SEMI   &trans   &kp LS(N1)     &hr LSHIFT LS(MINUS) &trans       &kp MINUS
                &none     &none        &none        &none        &none      &none    &none          &bt BT_SEL 0         &bt BT_SEL 1 &none
                                        &bt BT_CLR       &trans       &trans       &trans   &trans  &bt BT_NXT
            >;
        };
    };
};
